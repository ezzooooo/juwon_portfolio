[
  {
    "title": "세븐미어캣 사용자 앱",
    "titleEn": "7Meerkat User App",
    "slug": "7meerkat_user_app",
    "description": "1일 10만 이상의 입출차 트래픽이 발생하는 아파트 생활 플랫폼",
    "techStack": [
      "Flutter",
      "GetX",
      "Firebase",
      "Google Analytics",
      "Laravel",
      "MariaDB"
    ],
    "period": "2020.07 - 2022. 11",
    "open": true,
    "operating": true,
    "techParticipants": {
      "풀스택": "2명(본인 포함)"
    },
    "links": {
      "repo": "",
      "demo": ""
    },
    "thumbnail": "assets/images/7meerkat.png",
    "featured": true,
    "featuredOrder": 3,
    "screens": [
      "assets/images/projects/7meerkat_user_app/001.jpg",
      "assets/images/projects/7meerkat_user_app/002.jpg",
      "assets/images/projects/7meerkat_user_app/003.jpg",
      "assets/images/projects/7meerkat_user_app/004.jpg",
      "assets/images/projects/7meerkat_user_app/005.jpg",
      "assets/images/projects/7meerkat_user_app/006.jpg",
      "assets/images/projects/7meerkat_user_app/007.jpg",
      "assets/images/projects/7meerkat_user_app/008.jpg",
      "assets/images/projects/7meerkat_user_app/009.jpg"
    ],
    "overview": "아파트·빌딩·사용자·자동차를 연결하는 생활 플랫폼입니다. 차량이 가장 오래 머무는 주차장을 중심으로 시작해 입출차 관리/기록 조회, 방문자 사전등록을 통한 무인 차단기 개방을 지원합니다. 이후 단지 대상 커머스(세븐미어캣 샵)와 상가 유료주차장 연동(주차할인권)까지 확장했습니다.",
    "achievements": [
      "입출차 관리 전 과정 앱화: 단지 게이트/관제 연동, 기록 조회 UX 설계",
      "방문자 사전등록으로 무인 통과 구현, 경비실 대면 절차 최소화",
      "단지 대상 커머스 ‘세븐미어캣 샵’ 오픈, 첫 커머스 매출 창출(앱·백엔드 단독 개발)",
      "상가 유료주차장 연동 및 주차할인권 서비스 론칭(앱·백엔드 단독 개발)",
      "대용량 이력 뷰 성능 최적화: ListView.builder 적용으로 메모리 사용 억제"
    ],
    "improvements": [
      "GetX 심화 활용(특히 GetBinding) 및 의존성 주입 체계 개선",
      "화면별 상태 분리 및 작은 단위 리빌드로 전체 리빌드 감소",
      "입출차 이력 페이징/캐시 전략 고도화(기간 필터, 무한 스크롤, 오프라인 캐시)",
      "방문자/차단기 이벤트 로깅 표준화 및 모니터링 대시보드 확장"
    ]
  },
  {
    "title": "세븐미어캣 입출차 모니터링 Windows 앱",
    "titleEn": "7Meerkat Entry/Exit Monitoring (Windows)",
    "slug": "7meerkat_entry_exit_monitoring_windows",
    "description": "현장 CS 분석·설치 지원을 위한 내부용 Windows 앱(미인식/오인식 사진 분류, 실시간 재인식 검증, 카메라 세팅 점검)",
    "techStack": [
      "Flutter",
      "GetX",
      "FFI",
      "C",
      "Laravel"
    ],
    "period": "2022.07 - 2022.09",
    "open": false,
    "operating": false,
    "techParticipants": {
      "풀스택": "1명(본인)"
    },
    "links": {
      "repo": "",
      "demo": ""
    },
    "thumbnail": "assets/images/7meerkat.png",
    "overview": "세븐미어캣 주차관제 시스템 도입 이후, 현장에서 발생하는 미인식/오인식 사례를 빠르게 분석하고 카메라 설치 품질을 점검하기 위해 제작된 내부용 Windows 프로그램입니다. 미들웨어 서버와 동일한 번호인식 C DLL을 FFI로 호출해 현장 촬영 이미지를 즉시 재인식해 봄으로써 문제 원인이 촬영 품질인지, 엔진 학습 필요인지 신속히 판별할 수 있습니다. 신규 현장 설치 시 4방향 카메라(앞·위·옆·뒤)의 각도·프레이밍 검수에도 사용됩니다.",
    "achievements": [
      "미인식/오인식 사진 분류 및 현장별/차단기별 이슈 트러블슈팅 워크플로우 구축",
      "번호인식 엔진(C DLL)과 동일 환경 FFI 연동으로 재현성 높은 실시간 재인식 검증",
      "카메라 4방향 세팅 지원(프레이밍/각도 점검)으로 설치 품질 향상 및 재방문 감소",
      "CS 대응 속도 개선: 원격으로도 이미지 확인·재인식 검증 가능"
    ],
    "improvements": [
      "일괄 재인식 배치·리포트 내보내기(CSV/이미지 번들) 지원",
      "엔진 버전별 A/B 재인식 비교와 통계(정확도/재현율) 시각화"
    ]
  },
  {
    "title": "세븐미어캣 주차관제 시스템",
    "titleEn": "7Meerkat Parking Management System",
    "slug": "7meerkat_parking_management_system",
    "description": "아파트/상가 주차장 차단기 관제 솔루션(번호인식·신호처리·로그·API 연동)",
    "techStack": [
      "Python",
      "FastAPI",
      "Raspberry Pi",
      "PyQt",
      "Laravel"
    ],
    "period": "2021.12 - 2022.06",
    "open": true,
    "operating": true,
    "techParticipants": {
      "하드웨어·백엔드": "1명(본인)",
      "웹·백엔드": "1명",
      "하드웨어": "1명"
    },
    "links": {
      "repo": "",
      "demo": ""
    },
    "thumbnail": "assets/images/7meerkat.png",
    "overview": "시즌1(Python Flask + PyQt, 직원1)에서 낮은 번호인식률 문제를 확인했고, 시즌2(C#, 단일 프로그램, 직원2)에서는 모든 기능을 하나의 프로세스에 통합하여 안정성·확장성의 한계가 있었습니다. 시즌3에서는 미들웨어 서버와 엣지 디바이스(Raspberry Pi)로 역할을 분리하여 시스템 안정성과 비용 효율을 동시에 개선했습니다.",
    "achievements": [
      "아키텍처 분리: Python(FastAPI) 미들웨어 서버(번호인식, 서버 API 연동, API 로그) + Raspberry Pi Python(접점신호/시리얼 통신, 신호 로그)로 역할 분리",
      "비용 절감: 현장 4차단기 기준 고사양 Windows PC 4대 → Raspberry Pi 4대 + PC 1대로 전환, 생산 단가 30%+ 절감",
      "안정성 향상: 하드웨어 분리로 메모리 부족에 의한 프로세스 멈춤 90%+ 감소",
      "정확도/신뢰도 개선: 차량 진입 신호 중복 호출 문제 완전 해소",
      "운영 지표 개선: 차단기 관련 CS 접수 50%+ 감소",
      "배포 효율화: 신규 현장 설치 간소화(Windows 프로그램 USB 이미지, Raspberry Pi SD 카드 이미지로 즉시 부팅/운영)"
    ],
    "improvements": [
      "원격 모니터링 대시보드 고도화(라즈베리파이 상태/신호/카메라/번호인식 실시간 헬스체크)",
      "로그 중앙화로 원인 분석 시간 단축",
      "라즈베리파이 OTA 업데이트/롤백 파이프라인 구축",
      "중앙 서버 장애 대비 로컬 폴백/버퍼링 전략 강화(네트워크 단절 시 안전동작 보장)"
    ]
  },
  {
    "title": "달채비",
    "titleEn": "Dalchaebi",
    "slug": "dalchaebi",
    "description": "AI 기반 월경주기 분석·예측과 리포트·루틴·심리검사를 제공하는 여성 건강 관리 앱",
    "techStack": [
      "Flutter",
      "Riverpod",
      "Go Router",
      "In App Purchase",
      "AppsFlyer",
      "Amplitude",
      "Freezed",
      "Retrofit",
      "Dio"
    ],
    "period": "2023.06 - 2023.11",
    "open": true,
    "operating": false,
    "techParticipants": {
      "앱": "1명(본인)",
      "백엔드": "1명"
    },
    "links": {
      "repo": "",
      "demo": ""
    },
    "screens": [
      "assets/images/projects/dalchaebi/001.jpg",
      "assets/images/projects/dalchaebi/002.jpg",
      "assets/images/projects/dalchaebi/003.jpg",
      "assets/images/projects/dalchaebi/004.jpg",
      "assets/images/projects/dalchaebi/005.jpg",
      "assets/images/projects/dalchaebi/006.jpg",
      "assets/images/projects/dalchaebi/007.jpg",
      "assets/images/projects/dalchaebi/008.jpg"
    ],
    "thumbnail": "assets/images/dalchaebi.png",
    "overview": "여성의 일상에서 간과되기 쉬웠던 월경 경험을 데이터와 UX로 개선하는 앱입니다. 월경 주기를 AI로 분석·예측하고, 사용자의 기록을 바탕으로 리포트를 제공하며 루틴 관리와 유료 심리검사 기능을 통해 자기관리와 심리적 케어까지 지원합니다.",
    "achievements": [
      "월경 리포트 개발: 월경 정보·증상 기록 기반 맞춤 리포트 생성",
      "차트 컴포넌트 전면 커스텀: 막대/꺾은선/파이 그래프를 라이브러리 없이 디자인 시안과 1:1 구현",
      "루틴 관리 구현: table_calendar로 날짜 탐색, 알림·메모·완료 처리까지 한 화면 UX 설계",
      "유료 심리검사 플로우 구축: JSON 문항 스키마 → 설문 변환 → in_app_purchase 결제 → 결과 화면 애니메이션(챗봇형) 구성",
      "레이더(방사형) 차트 커스텀 구현: 결과지에서 핵심 지표를 한눈에 파악",
      "마케터 협업으로 Amplitude·AppsFlyer 연동, 주요 마케팅 지표 수집 지원"
    ],
    "improvements": [
      "루틴·리포트 오프라인 동기화 및 알림 신뢰성 고도화",
      "결제 복구/영수증 검증 강화, 환불·재결제 플로우 세분화"
    ]
  },
  {
    "title": "히어유알",
    "titleEn": "Here U R",
    "slug": "here_u_r",
    "description": "모임 일정·운영을 위한 캘린더·위치·딥링크를 갖춘 모임 관리 앱",
    "techStack": [
      "Flutter",
      "Riverpod",
      "Go Router",
      "Freezed",
      "Retrofit",
      "Dio"
    ],
    "period": "2024.04 - 2024.11",
    "open": false,
    "operating": false,
    "techParticipants": {
      "앱": "1명(본인)",
      "백엔드": "1명"
    },
    "links": {
      "repo": "",
      "demo": ""
    },
    "thumbnail": "assets/images/here_u_r.jpg",
    "featured": true,
    "featuredOrder": 2,
    "screens": [
      "assets/images/projects/here_u_r/001.jpg",
      "assets/images/projects/here_u_r/002.jpg",
      "assets/images/projects/here_u_r/003.jpg",
      "assets/images/projects/here_u_r/004.jpg",
      "assets/images/projects/here_u_r/005.jpg",
      "assets/images/projects/here_u_r/006.jpg",
      "assets/images/projects/here_u_r/007.jpg",
      "assets/images/projects/here_u_r/008.jpg",
      "assets/images/projects/here_u_r/009.jpg",
      "assets/images/projects/here_u_r/010.jpg",
      "assets/images/projects/here_u_r/011.jpg"
    ],
    "overview": "입사 당시 안드로이드만 배포된 1.0에서 iOS 배포 불가 이슈를 일주일 내 해결했습니다. 이후 누적된 QA를 백엔드와 함께 처리하던 중, GetX 기반 레거시 구조(초기 일괄 init, 컨트롤러에서 다이얼로그 호출, 비모델 파싱 등)로 유지보수성이 낮아 리팩토링을 추진했습니다. 약 1.5개월간 GetX → Riverpod 전환과 API 응답 제네릭 도입(코드·메시지 공통 + 데이터 모델 매핑)으로 안정성과 가독성을 개선했습니다. 2.0에서는 카드 기반 일정에서 캘린더 UI(table_calendar)로 전환하고, 위치 기반 맛집/장소 검색(Tmap API)과 이벤트 딥링크(선착순 경품)를 추가했습니다. 2.0 오픈 직후 서비스 종료되어 이후 개발은 진행하지 못했습니다.",
    "achievements": [
      "iOS 1.0 배포 이슈 해결(초기 세팅/서명/스토어 대응)",
      "아키텍처 리팩토링: GetX → Riverpod 전환, 컨트롤러 의존성 제거, 화면/상태 분리",
      "API 응답 제네릭 구조 도입으로 코드 일관성/가독성 향상",
      "레이어 분리(Repository/DTO/Entity) 정착",
      "일정 UX 개선: 카드 → 캘린더(table_calendar) 전환",
      "위치 기반 기능: Tmap 연동(맛집 제공, 장소 검색)",
      "딥링크 구현: 이벤트 URL → 앱 특정 화면 진입"
    ],
    "improvements": [
      "오프라인 캐시/재시도, 에러 매핑 일원화",
      "전환·성능 지표 계측과 A/B 실험 인프라"
    ]
  },
  {
    "title": "DID",
    "titleEn": "DID",
    "slug": "did",
    "description": "광고 영상 송출·원격 제어·OTA를 지원하는 Digital Information Display 시스템",
    "techStack": [
      "Android",
      "Kotlin",
      "Jetpack Compose",
      "SSE",
      "ADB",
      "OTA"
    ],
    "period": "2024.11 - 2025.04",
    "open": false,
    "operating": false,
    "techParticipants": {
      "앱": "1명(본인)",
      "백엔드": "1명",
      "웹": "1명"
    },
    "links": {
      "repo": "",
      "demo": ""
    },
    "thumbnail": "assets/images/did.jpg",
    "overview": "초기에는 단일 앱으로 광고 송출·서버 통신(헬스체크)·OTA까지 수행했으나, 자체 업데이트 중 프로세스 종료 이슈로 OTA가 불가했습니다. 이를 해결하기 위해 광고 플레이어 앱과 서버와 SSE로 통신하는 컨트롤 앱을 분리하여, 컨트롤 앱이 플레이어를 제어·업데이트하도록 아키텍처를 재구성했습니다. Jetpack Compose 기반 선언형 UI로 빠르게 개발했고, 관리자 페이지에서 SSE 명령(재시작/업데이트/송출 정지·재개/기기 종료)을 수신해 원격 제어가 가능합니다. 루팅된 디바이스에서는 ADB를 활용해 앱 업데이트·기기 조작을 자동화했습니다.",
    "achievements": [
      "OTA 가능 아키텍처 확립: 플레이어/컨트롤 앱 분리로 자체 업데이트 중단 이슈 해결",
      "원격 제어 파이프라인: SSE 기반 관리자 명령(재시작/업데이트/정지/재개/종료) 처리",
      "재생 리포팅: 각 광고 종료 시 서버로 재생된 영상 식별자/회차 보고(광고별 트래킹)",
      "배포 자동화: 루팅 디바이스 ADB를 통한 무인 설치·제어 절차 구현",
      "생산성: Jetpack Compose 채택으로 선언형 UI 생산성 확보",
      "무결성 검증: 백엔드 협업으로 광고 영상 체크섬 검증을 통해 파일 손상 탐지",
      "프리로딩 전환: 이중 플레이어 구성으로 다음 영상 선적재 후 무중단 전환(초기 로딩 지연 완화)"
    ],
    "improvements": [
      "플레이어 종료 시 메모리 완전 해제 미흡: 자원 해제/참조 해지/프로세스 분리 점검 필요",
      "헬스체크 고도화 및 자동 재시작 정책 정교화 필요",
      "체크섬 불일치 자동 대응 미구현: 재다운로드/검증/롤백 자동화 필요"
    ]
  },
  {
    "title": "새폰내폰",
    "titleEn": "New Phone My Phone",
    "slug": "new_phone_my_phone",
    "description": "대리점과 고객을 연결해 투명한 가격 견적과 채팅을 제공하는 휴대폰 구매 플랫폼",
    "techStack": [
      "Flutter",
      "Flutter Web",
      "Riverpod",
      "Go Router",
      "Freezed",
      "Retrofit",
      "Dio"
    ],
    "period": "2024.09 - 2024.11",
    "open": false,
    "operating": false,
    "sideProject": true,
    "techParticipants": {
      "프론트엔드": "1명(본인)",
      "백엔드": "1명"
    },
    "links": {
      "repo": "",
      "demo": ""
    },
    "thumbnail": "assets/images/new_phone_my_phone.jpg",
    "featured": true,
    "featuredOrder": 1,
    "overview": "고객이 원하는 기종/데이터 사용량/기존 통신사 등의 정보를 제출하면, 대리점이 요금제와 함께 가격 견적을 제시하고, 고객이 수락 시 채팅으로 바로 연결됩니다. 견적 비교의 불편을 줄이고 투명한 가격 정보를 제공해 구매 의사결정을 돕습니다. 대리점 영업 및 서비스 운영의 어려움으로 현재는 서비스가 종료된 상태입니다.",
    "achievements": [
      "정보 기반 견적 산출: 기종·데이터·통신사 정보를 바탕으로 대리점 견적 제안",
      "매칭/채팅 연동: 견적 수락 시 즉시 채팅 연결로 전환 손실 최소화",
      "가격 투명성 제고: 중개 구조로 고객 접근성 향상",
      "플랫폼 일원화: 사용자 앱과 대리점 웹을 모두 Flutter로 개발하여 코드 공유 및 생산성 확보",
      "상호작용 강화: 견적 입력 단계에 직접 제작한 인터랙션 요소로 이탈 방지",
      "채팅 UX 구현: ListView.reverse와 Row 정렬을 활용, 아래에서 위로 흐르고 판매자/고객 메시지 구분",
      "색상 선택 애니메이션: 실제 기기 사진 2장을 겹쳐 자연스러운 컬러 전환 구현",
      "가격 범위 입력 UX: 숫자 직접 입력 대신 슬라이더로 최소·최대 가격을 직관적으로 조절"
    ],
    "improvements": [
      "실제 대리점 견적 프로세스와 괴리: 현업 흐름에 맞춘 견적 입력/관리 방식 재설계 필요",
      "실시간 알림/사운드 피드백 미구현: 견적 요청 도착 시 배달앱 수준의 즉각 알림·음향 제공 필요",
      "응답 추적/오케스트레이션 미흡: 대리점별 응답 SLA·미응답 자동 알림(리마인드)·재배정 흐름 부족"
    ],
    "screens": [
      "assets/images/projects/new_phone_my_phone/001.jpg",
      "assets/images/projects/new_phone_my_phone/002.jpg",
      "assets/images/projects/new_phone_my_phone/003.gif",
      "assets/images/projects/new_phone_my_phone/004.jpg",
      "assets/images/projects/new_phone_my_phone/005.jpg",
      "assets/images/projects/new_phone_my_phone/006.jpg",
      "assets/images/projects/new_phone_my_phone/007.jpg",
      "assets/images/projects/new_phone_my_phone/008.jpg",
      "assets/images/projects/new_phone_my_phone/009.jpg"
    ]
  },
  {
    "title": "A-PASS",
    "titleEn": "A-PASS",
    "slug": "a_pass",
    "description": "국내 미술 전시 예매·결제를 지원하는 플러터 웹 플랫폼(사용자/관리자 웹)",
    "techStack": [
      "Flutter Web",
      "Riverpod",
      "Go Router",
      "Billgate",
      "Bootpay(본인인증)",
      "Freezed",
      "Retrofit",
      "Dio"
    ],
    "period": "2025.03 - 2025.04",
    "open": true,
    "operating": true,
    "sideProject": true,
    "techParticipants": {
      "프론트엔드": "1명(본인)",
      "백엔드": "1명"
    },
    "links": {
      "repo": "",
      "demo": "https://artpass.co.kr/"
    },
    "thumbnail": "assets/images/a_pass.jpg",
    "overview": "플러터 웹 기반으로 사용자 예매 웹과 관리자 웹을 단기간에 동시 구축. 사용자 측은 포스터/상세/예매 플로우와 결제(Billgate)·본인인증(Bootpay)을 제공하고, 관리자 측은 대시보드에서 예매 내역·티켓 사용 처리·결제 내역을 통합 관리.",
    "achievements": [
      "빠른 출시: 약 1개월 내 사용자/관리자 웹 동시 구축 및 ‘마르크 샤갈 전시’ 오픈",
      "결제/본인인증: Billgate 결제(승인/실패/취소) 및 Bootpay 본인인증 연동",
      "관리 기능: 관리자 대시보드에서 예매 내역, 티켓 사용 처리, 결제 내역 관리",
      "플러터 웹 적용: 단일 코드베이스로 사용자/관리자 웹 동시 개발"
    ],
    "improvements": [
      "결제 실패 재시도·환불·정산 리포트 자동화",
      "지표/퍼널 계측 및 캠페인 트래킹 연동"
    ],
    "screens": [
      "assets/images/projects/a_pass/001.jpg",
      "assets/images/projects/a_pass/002.jpg",
      "assets/images/projects/a_pass/003.jpg",
      "assets/images/projects/a_pass/004.jpg",
      "assets/images/projects/a_pass/005.jpg",
      "assets/images/projects/a_pass/006.jpg"
    ]
  },
  {
    "title": "프렌드 아카데미",
    "titleEn": "Friend Academy",
    "slug": "friend_academy",
    "description": "춤 커리큘럼 기반 영상 학습과 진행률 관리가 가능한 교육 스트리밍 플랫폼",
    "techStack": [
      "Vue 3 (User Web)",
      "Flutter Web (Admin)",
      "Vimeo",
      "TypeScript",
      "Nicepay API",
      "Bootpay(본인인증)",
      "html_editor_enhanced"
    ],
    "period": "2025.04 - 2025.05",
    "open": true,
    "operating": true,
    "sideProject": true,
    "techParticipants": {
      "프론트엔드": "1명(본인)",
      "백엔드": "1명"
    },
    "links": {
      "repo": "",
      "demo": "https://friend.academy/"
    },
    "thumbnail": "assets/images/friend_academy.jpg",
    "overview": "2개월 내 사용자 웹(Vue 3)과 관리자 웹(Flutter Web)을 구축했습니다. 사용자는 대시보드에서 학습 진행률을 확인하고, 커스텀 강좌 플레이어로 배속/웹캠 오버레이/챕터 이동/구간 반복/전체화면을 지원합니다. VOD/라이브는 Vimeo 연동으로 제공했으며, PC/모바일 반응형 UI와 PC 영상 목록의 호버 프리뷰(디밍+확대+샘플 자동 재생)를 구현했습니다.",
    "achievements": [
      "커스텀 강좌 플레이어: 배속, 웹캠 띄우기, 챕터 이동, 구간 반복, 전체화면 지원",
      "진행률 대시보드: 사용자별 학습 진척도 조회",
      "Vimeo 연동: VOD/라이브 스트리밍 재생 파이프라인 구축",
      "반응형 UX: PC/모바일 대응, PC 목록 호버 시 디밍+확대+샘플 자동 재생",
      "관리자 웹(Flutter Web): 강좌/커리큘럼/사용자 관리 기능 구현",
      "단기간 구축: 총 2개월 내 사용자/관리자 웹 동시 개발",
      "결제/본인인증: NICEPAY 결제 연동, Bootpay 본인인증 적용",
      "게시판: Admin에서 html_editor_enhanced로 HTML 저장, User는 Vue v-html로 렌더링",
      "Vimeo 임베드 파서: 임베드 코드 정규식 파싱→필수 정보만 추출, 사용자 웹에서 iframe 크기 동적 조절"
    ],
    "improvements": [
      "플레이어 일원화 과제: Flutter Web iframe 제약으로 사용자 웹을 Vue로 전환 — 장기적으로 단일 코드베이스 전략 검토"
    ],
    "screens": [
      "assets/images/projects/friend_academy/001.jpg",
      "assets/images/projects/friend_academy/001_mobile.jpg",
      "assets/images/projects/friend_academy/002.jpg",
      "assets/images/projects/friend_academy/002_mobile.jpg",
      "assets/images/projects/friend_academy/003.jpg",
      "assets/images/projects/friend_academy/003_mobile.jpg",
      "assets/images/projects/friend_academy/004.jpg",
      "assets/images/projects/friend_academy/004_mobile.jpg"
    ]
  },
  {
    "title": "비공페이",
    "titleEn": "B0 Pay",
    "slug": "b0pay",
    "description": "인플루언서 기반 티켓·상품 판매를 지원하는 커머스 플랫폼",
    "techStack": [
      "Flutter Web (User/Admin)",
      "Billgate",
      "Bootpay(본인인증)",
      "Daum Postcode API"
    ],
    "period": "2025.06 - 2025.08",
    "open": true,
    "operating": true,
    "sideProject": true,
    "techParticipants": {
      "프론트엔드": "1명(본인)",
      "백엔드": "1명"
    },
    "links": {
      "repo": "",
      "demo": "https://b0pay.com/"
    },
    "thumbnail": "assets/images/b0pay.jpg",
    "overview": "사용자/관리자 웹을 Flutter Web로 개발. Billgate 결제, Bootpay 본인인증, 다음 주소 API로 배송지 입력을 지원.",
    "achievements": [
      "결제/본인인증 통합: Billgate 결제, Bootpay 본인인증 연동",
      "주소/배송: Daum Postcode API 기반 배송지 입력 플로우 구축",
      "관리자 웹: 주문·배송·정산 관리 화면 구성"
    ],
    "improvements": [
      "정산 자동화/리포트 고도화",
      "프로모션/추천 트래킹·지표 강화"
    ]
  }
]